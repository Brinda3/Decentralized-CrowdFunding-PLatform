/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace CampaignFactory {
      
    export type CampaignInfoStruct = {campaignAddress: AddressLike, creator: AddressLike, createdAt: BigNumberish, label: string}

    export type CampaignInfoStructOutput = [campaignAddress: string, creator: string, createdAt: bigint, label: string] & {campaignAddress: string, creator: string, createdAt: bigint, label: string }
  
    }

  export interface CampaignFactoryInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "FACTORY_ADMIN" | "allCampaigns" | "campaigns" | "createCampaign" | "getCampaignAddress" | "getCampaignInfo" | "getRoleAdmin" | "grantRole" | "hasRole" | "nextCampaignId" | "renounceRole" | "revokeRole" | "supportsInterface" | "totalCampaigns" | "updateLabel"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CampaignCreated" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"): EventFragment;

    encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'FACTORY_ADMIN', values?: undefined): string;
encodeFunctionData(functionFragment: 'allCampaigns', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'campaigns', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createCampaign', values: [AddressLike, string, string, BigNumberish, BigNumberish, BigNumberish, string]): string;
encodeFunctionData(functionFragment: 'getCampaignAddress', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getCampaignInfo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'nextCampaignId', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'totalCampaigns', values?: undefined): string;
encodeFunctionData(functionFragment: 'updateLabel', values: [BigNumberish, string]): string;

    decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'FACTORY_ADMIN', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allCampaigns', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'campaigns', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createCampaign', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCampaignAddress', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCampaignInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nextCampaignId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalCampaigns', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateLabel', data: BytesLike): Result;
  }

  
    export namespace CampaignCreatedEvent {
      export type InputTuple = [campaignId: BigNumberish, campaignAddress: AddressLike, creator: AddressLike, label: string, createdAt: BigNumberish];
      export type OutputTuple = [campaignId: bigint, campaignAddress: string, creator: string, label: string, createdAt: bigint];
      export interface OutputObject {campaignId: bigint, campaignAddress: string, creator: string, label: string, createdAt: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CampaignFactory extends BaseContract {
    
    connect(runner?: ContractRunner | null): CampaignFactory;
    waitForDeployment(): Promise<this>;

    interface: CampaignFactoryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    FACTORY_ADMIN: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    allCampaigns: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    campaigns: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, string] & {campaignAddress: string, creator: string, createdAt: bigint, label: string }],
      'view'
    >
    

    
    createCampaign: TypedContractMethod<
      [asset: AddressLike, name: string, symbol: string, fundingCap: BigNumberish, minDeposit: BigNumberish, unlockTime: BigNumberish, label: string, ],
      [[bigint, string] & {campaignId: bigint, campaignAddr: string }],
      'nonpayable'
    >
    

    
    getCampaignAddress: TypedContractMethod<
      [id: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getCampaignInfo: TypedContractMethod<
      [id: BigNumberish, ],
      [CampaignFactory.CampaignInfoStructOutput],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    nextCampaignId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    totalCampaigns: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    updateLabel: TypedContractMethod<
      [id: BigNumberish, newLabel: string, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'FACTORY_ADMIN'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'allCampaigns'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'campaigns'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, string] & {campaignAddress: string, creator: string, createdAt: bigint, label: string }],
      'view'
    >;
getFunction(nameOrSignature: 'createCampaign'): TypedContractMethod<
      [asset: AddressLike, name: string, symbol: string, fundingCap: BigNumberish, minDeposit: BigNumberish, unlockTime: BigNumberish, label: string, ],
      [[bigint, string] & {campaignId: bigint, campaignAddr: string }],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getCampaignAddress'): TypedContractMethod<
      [id: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getCampaignInfo'): TypedContractMethod<
      [id: BigNumberish, ],
      [CampaignFactory.CampaignInfoStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'nextCampaignId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'totalCampaigns'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'updateLabel'): TypedContractMethod<
      [id: BigNumberish, newLabel: string, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'CampaignCreated'): TypedContractEvent<CampaignCreatedEvent.InputTuple, CampaignCreatedEvent.OutputTuple, CampaignCreatedEvent.OutputObject>;
getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;

    filters: {
      
      'CampaignCreated(uint256,address,address,string,uint256)': TypedContractEvent<CampaignCreatedEvent.InputTuple, CampaignCreatedEvent.OutputTuple, CampaignCreatedEvent.OutputObject>;
      CampaignCreated: TypedContractEvent<CampaignCreatedEvent.InputTuple, CampaignCreatedEvent.OutputTuple, CampaignCreatedEvent.OutputObject>;
    

      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    
    };
  }