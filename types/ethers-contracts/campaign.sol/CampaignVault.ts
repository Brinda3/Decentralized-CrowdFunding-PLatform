/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface CampaignVaultInterface extends Interface {
    getFunction(nameOrSignature: "ADMIN_ROLE" | "DEFAULT_ADMIN_ROLE" | "addYield" | "allowance" | "approve" | "asset" | "balanceOf" | "convertToAssets" | "convertToShares" | "decimals" | "deposit" | "escrowaddress" | "fundingCap" | "getRoleAdmin" | "grantRole" | "hasRole" | "isKycVerified" | "maxDeposit" | "maxMint" | "maxRedeem" | "maxWithdraw" | "minDeposit" | "mint" | "name" | "previewDeposit" | "previewMint" | "previewRedeem" | "previewWithdraw" | "redeem" | "renounceRole" | "rescueTokens" | "revokeRole" | "supportsInterface" | "symbol" | "timeLeftToUnlock" | "totalAssets" | "totalSupply" | "transfer" | "transferFrom" | "unlockTime" | "withdraw"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "Deposit" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Transfer" | "Withdraw" | "YieldAdded"): EventFragment;

    encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'addYield', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'allowance', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'convertToAssets', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'convertToShares', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'escrowaddress', values?: undefined): string;
encodeFunctionData(functionFragment: 'fundingCap', values?: undefined): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isKycVerified', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'maxDeposit', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'maxMint', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'maxRedeem', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'maxWithdraw', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'minDeposit', values?: undefined): string;
encodeFunctionData(functionFragment: 'mint', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'previewDeposit', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'previewMint', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'previewRedeem', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'previewWithdraw', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish, AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'rescueTokens', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'timeLeftToUnlock', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'unlockTime', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, AddressLike, AddressLike]): string;

    decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addYield', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'escrowaddress', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'fundingCap', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isKycVerified', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'minDeposit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rescueTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'timeLeftToUnlock', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unlockTime', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, spender: AddressLike, value: BigNumberish];
      export type OutputTuple = [owner: string, spender: string, value: bigint];
      export interface OutputObject {owner: string, spender: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DepositEvent {
      export type InputTuple = [sender: AddressLike, owner: AddressLike, assets: BigNumberish, shares: BigNumberish];
      export type OutputTuple = [sender: string, owner: string, assets: bigint, shares: bigint];
      export interface OutputObject {sender: string, owner: string, assets: bigint, shares: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, value: BigNumberish];
      export type OutputTuple = [from: string, to: string, value: bigint];
      export interface OutputObject {from: string, to: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawEvent {
      export type InputTuple = [sender: AddressLike, receiver: AddressLike, owner: AddressLike, assets: BigNumberish, shares: BigNumberish];
      export type OutputTuple = [sender: string, receiver: string, owner: string, assets: bigint, shares: bigint];
      export interface OutputObject {sender: string, receiver: string, owner: string, assets: bigint, shares: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace YieldAddedEvent {
      export type InputTuple = [amount: BigNumberish, timestamp: BigNumberish];
      export type OutputTuple = [amount: bigint, timestamp: bigint];
      export interface OutputObject {amount: bigint, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CampaignVault extends BaseContract {
    
    connect(runner?: ContractRunner | null): CampaignVault;
    waitForDeployment(): Promise<this>;

    interface: CampaignVaultInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    addYield: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    allowance: TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    approve: TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    asset: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    balanceOf: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    convertToAssets: TypedContractMethod<
      [shares: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    convertToShares: TypedContractMethod<
      [assets: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    decimals: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    deposit: TypedContractMethod<
      [assets: BigNumberish, receiver: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    escrowaddress: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    fundingCap: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isKycVerified: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    maxDeposit: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    maxMint: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    maxRedeem: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    maxWithdraw: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    minDeposit: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    mint: TypedContractMethod<
      [shares: BigNumberish, receiver: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    previewDeposit: TypedContractMethod<
      [assets: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    previewMint: TypedContractMethod<
      [shares: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    previewRedeem: TypedContractMethod<
      [shares: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    previewWithdraw: TypedContractMethod<
      [assets: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    redeem: TypedContractMethod<
      [shares: BigNumberish, receiver: AddressLike, owner: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    rescueTokens: TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    timeLeftToUnlock: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalAssets: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalSupply: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transfer: TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    unlockTime: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    withdraw: TypedContractMethod<
      [assets: BigNumberish, receiver: AddressLike, owner: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'addYield'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowance'): TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'asset'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'convertToAssets'): TypedContractMethod<
      [shares: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'convertToShares'): TypedContractMethod<
      [assets: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'decimals'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'deposit'): TypedContractMethod<
      [assets: BigNumberish, receiver: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'escrowaddress'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'fundingCap'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isKycVerified'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'maxDeposit'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'maxMint'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'maxRedeem'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'maxWithdraw'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'minDeposit'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'mint'): TypedContractMethod<
      [shares: BigNumberish, receiver: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'previewDeposit'): TypedContractMethod<
      [assets: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'previewMint'): TypedContractMethod<
      [shares: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'previewRedeem'): TypedContractMethod<
      [shares: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'previewWithdraw'): TypedContractMethod<
      [assets: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'redeem'): TypedContractMethod<
      [shares: BigNumberish, receiver: AddressLike, owner: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'rescueTokens'): TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'timeLeftToUnlock'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalAssets'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transfer'): TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unlockTime'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [assets: BigNumberish, receiver: AddressLike, owner: AddressLike, ],
      [bigint],
      'nonpayable'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'Deposit'): TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
getEvent(key: 'Withdraw'): TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
getEvent(key: 'YieldAdded'): TypedContractEvent<YieldAddedEvent.InputTuple, YieldAddedEvent.OutputTuple, YieldAddedEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'Deposit(address,address,uint256,uint256)': TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
      Deposit: TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
    

      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    

      'Withdraw(address,address,address,uint256,uint256)': TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
      Withdraw: TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
    

      'YieldAdded(uint256,uint256)': TypedContractEvent<YieldAddedEvent.InputTuple, YieldAddedEvent.OutputTuple, YieldAddedEvent.OutputObject>;
      YieldAdded: TypedContractEvent<YieldAddedEvent.InputTuple, YieldAddedEvent.OutputTuple, YieldAddedEvent.OutputObject>;
    
    };
  }